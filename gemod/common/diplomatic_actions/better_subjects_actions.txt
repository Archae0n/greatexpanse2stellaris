##########################################################################
# Better Subjects Diplomatic Actions
# by Lucas Pinheiro Silva
##########################################################################

# Variables:
#  is_listed, boolean, decides if this diplomactic action type is listed in diplomatic view.
#  prerequisites, list, the technologies required to enable the player to send this diplomatic action.
#  requires_actor_peace, boolean, false by default, will require the actor to be at peace for this action to pass the possible check.
#  requires_alliance_vote, boolean, false by default, will require the alliance of the actor to vote for this action before passing it on to the recipient.
#  requires_actor_independence, boolean, true by default, will require the actor to be independent.
#  requires_recipient_independence, boolean, true by default, will require the recipient to be independent.
#  requires_actor_federation_leader, boolean, false by default, if the actor is in a federation, he has to be the leader of it.
#  requires_recipient_federation_leader, boolean, true by default, if the recipient is in a federation, he has to be the leader of it.
#  show_decline_to_alliance_members, boolean, false by default, will show your alliance members when you decline a proposal of this type.
#  should_show_auto_accept_message_recipient, boolean, decides if the recipient gets a message showing the diplomatic action.
#  should_open_auto_accept_message_recipient, boolean, decides if the recipient automatically opens this message.
#  should_show_auto_accept_message_actor, boolean, decides if the actor gets a reply showing the diplomatic action.
#  should_notify_all_communications, boolean, decides if a message notification is sent to all countries who have communications with actor or recipient
#  AI_acceptance_base_value, default = 0
#  potential, trigger, root is actor, from is recipient, decides if the action is shown
#  possible, trigger, root is actor, from is recipient, decides if the action is still possible
#  proposable, trigger, root is actor, from is recipient, decides if the action is proposable

action_guarantee_independence = {
	auto_accepted = yes
	should_notify_all_communications = yes
	requires_recipient_independence = yes
	requires_actor_independence = yes 

	potential = {
		# Cannot guarantee if you are a vassal
		hidden_trigger = {
			NOR = {
				is_subject_type = "vassal"
				is_subject_type = "tvassal"
			}
		}

		# Cannot guarantee someone who is a vassal or protectorate
		hidden_trigger = {
			NOT = {
				from = {
					OR = {
						is_subject_type = "vassal"
						is_subject_type = "protectorate"
						is_subject_type = "tvassal"
						is_subject_type = "tprotectorate"
					}
				}
			}
		}

		# Cannot guarantee if you are in an alliance
		hidden_trigger = {
			NOT = {
				exists = alliance
			}
		}

		# Cannot guarantee if they are in an alliance
		hidden_trigger = {
			exists = from
			from = {
				NOT = {
					exists = alliance
				}
			}
		}

		# Already guaranteeing
		hidden_trigger = {
			exists = from
			NOT = {
				is_guaranteeing = from
			}
		}
		# Defensive Pact
		hidden_trigger = {
			exists = from
			NOT = {
				has_defensive_pact = from
			}
		}
	}
	possible = {
		custom_tooltip = {
				fail_text = "requires_actor_not_fanatic_purifiers"
				OR = {
						is_same_species = from
						NOT = { has_valid_civic = civic_fanatic_purifiers        }
				}
		}
		custom_tooltip = {
				fail_text = "requires_recipient_not_fanatic_purifiers"
				OR = {
						is_same_species = from
						from = { NOT = { has_valid_civic = civic_fanatic_purifiers } }
				}
		}
		custom_tooltip = {
				fail_text = "requires_actor_not_devouring_swarm"
				NOT = { has_valid_civic = civic_hive_devouring_swarm        }
		}
		custom_tooltip = {
				fail_text = "requires_recipient_not_devouring_swarm"
				from = { NOT = { has_valid_civic = civic_hive_devouring_swarm } }
		}
		custom_tooltip = {
			fail_text = "requires_actor_not_machine_terminator"
			OR = {
				is_same_species = from
				NOT = { has_civic = civic_machine_terminator }
				AND = {
					has_civic = civic_machine_terminator
					from = {
						OR = {
							has_country_flag = synthetic_empire
							has_authority = auth_machine_intelligence
						}
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_recipient_not_machine_terminator"
			OR = {
				is_same_species = from
				from = { NOT = { has_civic = civic_machine_terminator } }
				AND = {
					from = { has_civic = civic_machine_terminator }
					OR = {
						has_country_flag = synthetic_empire
						has_authority = auth_machine_intelligence
					}
				}
			}
		}
		custom_tooltip = {
				fail_text = "requires_actor_not_inward_perfection"
				NOT = { has_valid_civic = civic_inwards_perfection }
		}
	}
}